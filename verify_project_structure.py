"""
Verify that the project structure is complete and meets the requirements.
"""
import os
import sys


def check_file_exists(path, description):
    """Check if a file exists and print status."""
    if os.path.exists(path):
        print(f"‚úì {description}: {path}")
        return True
    else:
        print(f"‚ùå {description}: {path} - NOT FOUND")
        return False


def check_directory_exists(path, description):
    """Check if a directory exists and print status."""
    if os.path.isdir(path):
        print(f"‚úì {description}: {path}/")
        return True
    else:
        print(f"‚ùå {description}: {path}/ - NOT FOUND")
        return False


def verify_project_structure():
    """Verify the complete project structure."""
    print("=" * 60)
    print("PROJECT STRUCTURE VERIFICATION")
    print("=" * 60)
    
    all_good = True
    
    # Root files
    print("\nüìÅ Root Files:")
    all_good &= check_file_exists("requirements.txt", "Dependencies file")
    all_good &= check_file_exists("setup.py", "Setup script")
    all_good &= check_file_exists("fractal_editor.log", "Log file (created)")
    
    # Main package
    print("\nüìÅ Main Package:")
    all_good &= check_directory_exists("fractal_editor", "Main package directory")
    all_good &= check_file_exists("fractal_editor/__init__.py", "Package init")
    all_good &= check_file_exists("fractal_editor/main.py", "Main entry point")
    
    # Controllers
    print("\nüìÅ Controllers:")
    all_good &= check_directory_exists("fractal_editor/controllers", "Controllers directory")
    all_good &= check_file_exists("fractal_editor/controllers/__init__.py", "Controllers init")
    all_good &= check_file_exists("fractal_editor/controllers/base.py", "Base controllers")
    
    # Models
    print("\nüìÅ Models:")
    all_good &= check_directory_exists("fractal_editor/models", "Models directory")
    all_good &= check_file_exists("fractal_editor/models/__init__.py", "Models init")
    all_good &= check_file_exists("fractal_editor/models/data_models.py", "Data models")
    all_good &= check_file_exists("fractal_editor/models/interfaces.py", "Abstract interfaces")
    
    # Generators
    print("\nüìÅ Generators:")
    all_good &= check_directory_exists("fractal_editor/generators", "Generators directory")
    all_good &= check_file_exists("fractal_editor/generators/__init__.py", "Generators init")
    all_good &= check_file_exists("fractal_editor/generators/base.py", "Base generator classes")
    
    # Services
    print("\nüìÅ Services:")
    all_good &= check_directory_exists("fractal_editor/services", "Services directory")
    all_good &= check_file_exists("fractal_editor/services/__init__.py", "Services init")
    all_good &= check_file_exists("fractal_editor/services/error_handling.py", "Error handling service")
    all_good &= check_file_exists("fractal_editor/services/parallel_calculator.py", "Parallel calculator")
    
    # Plugins
    print("\nüìÅ Plugins:")
    all_good &= check_directory_exists("fractal_editor/plugins", "Plugins directory")
    all_good &= check_file_exists("fractal_editor/plugins/__init__.py", "Plugins init")
    all_good &= check_file_exists("fractal_editor/plugins/base.py", "Plugin base classes")
    
    # UI
    print("\nüìÅ UI:")
    all_good &= check_directory_exists("fractal_editor/ui", "UI directory")
    all_good &= check_file_exists("fractal_editor/ui/__init__.py", "UI init")
    
    # Test files
    print("\nüìÅ Test Files:")
    all_good &= check_file_exists("test_task1_verification.py", "Task 1 verification test")
    all_good &= check_file_exists("verify_project_structure.py", "Structure verification script")
    
    print("\n" + "=" * 60)
    if all_good:
        print("‚úÖ PROJECT STRUCTURE COMPLETE!")
        print("All required directories and files are present.")
    else:
        print("‚ùå PROJECT STRUCTURE INCOMPLETE!")
        print("Some required files or directories are missing.")
    print("=" * 60)
    
    return all_good


def verify_dependencies():
    """Verify that dependencies are properly specified."""
    print("\nüì¶ DEPENDENCIES VERIFICATION:")
    
    try:
        with open("requirements.txt", "r") as f:
            content = f.read()
            
        required_deps = ["PyQt6", "numpy", "Pillow"]
        all_deps_found = True
        
        for dep in required_deps:
            if dep in content:
                print(f"‚úì {dep} - specified in requirements.txt")
            else:
                print(f"‚ùå {dep} - missing from requirements.txt")
                all_deps_found = False
        
        return all_deps_found
        
    except FileNotFoundError:
        print("‚ùå requirements.txt not found")
        return False


def verify_imports():
    """Verify that all core modules can be imported."""
    print("\nüîó IMPORT VERIFICATION:")
    
    imports_to_test = [
        ("fractal_editor.models.data_models", "Data models"),
        ("fractal_editor.models.interfaces", "Abstract interfaces"),
        ("fractal_editor.generators.base", "Generator base classes"),
        ("fractal_editor.controllers.base", "Controller classes"),
        ("fractal_editor.services.error_handling", "Error handling service"),
        ("fractal_editor.plugins.base", "Plugin base classes"),
    ]
    
    all_imports_ok = True
    
    for module_name, description in imports_to_test:
        try:
            __import__(module_name)
            print(f"‚úì {description}: {module_name}")
        except ImportError as e:
            print(f"‚ùå {description}: {module_name} - IMPORT ERROR: {e}")
            all_imports_ok = False
    
    return all_imports_ok


def main():
    """Main verification function."""
    structure_ok = verify_project_structure()
    deps_ok = verify_dependencies()
    imports_ok = verify_imports()
    
    print("\n" + "=" * 60)
    print("FINAL VERIFICATION SUMMARY")
    print("=" * 60)
    
    if structure_ok and deps_ok and imports_ok:
        print("üéâ ALL VERIFICATIONS PASSED!")
        print("Task 1 is completely implemented and ready.")
        print("‚úì Project structure is complete")
        print("‚úì Dependencies are properly specified")
        print("‚úì All core modules can be imported")
        print("‚úì Abstract base classes are implemented")
        print("‚úì Data models are complete")
        return True
    else:
        print("‚ùå SOME VERIFICATIONS FAILED!")
        if not structure_ok:
            print("- Project structure issues found")
        if not deps_ok:
            print("- Dependency specification issues found")
        if not imports_ok:
            print("- Import issues found")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)